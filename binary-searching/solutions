function binarySearch(arr, target) {
    let left = 0, right = arr.length - 1;
    while (left <= right) {
        const mid = Math.floor((left + right) / 2);
        if (arr[mid] === target) return mid;
        if (arr[mid] < target) left = mid + 1;
        else right = mid - 1;
    }
    return -1;
}

function searchRange(nums, target) {
    function findPosition(isFirst) {
        let left = 0, right = nums.length - 1;
        while (left <= right) {
            const mid = Math.floor((left + right) / 2);
            if (nums[mid] === target) {
                if (isFirst) {
                    if (mid === 0 || nums[mid - 1] !== target) return mid;
                    right = mid - 1;
                } else {
                    if (mid === nums.length - 1 || nums[mid + 1] !== target) return mid;
                    left = mid + 1;
                }
            } else if (nums[mid] < target) left = mid + 1;
            else right = mid - 1;
        }
        return -1;
    }
    return [findPosition(true), findPosition(false)];
}

function countOccurrences(arr, target) {
    function binarySearchPosition(findFirst) {
        let left = 0, right = arr.length - 1;
        let result = -1;
        while (left <= right) {
            const mid = Math.floor((left + right) / 2);
            if (arr[mid] === target) {
                result = mid;
                if (findFirst) right = mid - 1;
                else left = mid + 1;
            } else if (arr[mid] < target) left = mid + 1;
            else right = mid - 1;
        }
        return result;
    }

    const first = binarySearchPosition(true);
    if (first === -1) return 0;
    const last = binarySearchPosition(false);
    return last - first + 1;
}

function squareRoot(x) {
    let left = 0, right = x;
    while (left <= right) {
        const mid = Math.floor((left + right) / 2);
        if (mid * mid === x) return mid;
        if (mid * mid < x) left = mid + 1;
        else right = mid - 1;
    }
    return right;
}

function findPeakElement(nums) {
    let left = 0, right = nums.length - 1;
    while (left < right) {
        const mid = Math.floor((left + right) / 2);
        if (nums[mid] > nums[mid + 1]) right = mid;
        else left = mid + 1;
    }
    return left;
}


function search(nums, target) {
    let left = 0, right = nums.length - 1;
    while (left <= right) {
        const mid = Math.floor((left + right) / 2);
        if (nums[mid] === target) return mid;
        if (nums[left] <= nums[mid]) { // Left part is sorted
            if (nums[left] <= target && target < nums[mid]) right = mid - 1;
            else left = mid + 1;
        } else { // Right part is sorted
            if (nums[mid] < target && target <= nums[right]) left = mid + 1;
            else right = mid - 1;
        }
    }
    return -1;
}


function findMin(nums) {
    let left = 0, right = nums.length - 1;
    while (left < right) {
        const mid = Math.floor((left + right) / 2);
        if (nums[mid] > nums[right]) left = mid + 1;
        else right = mid;
    }
    return nums[left];
}


function findClosest(arr, target) {
    let left = 0, right = arr.length - 1;
    while (left < right) {
        const mid = Math.floor((left + right) / 2);
        if (arr[mid] === target) return arr[mid];
        if (arr[mid] < target) left = mid + 1;
        else right = mid;
    }
    // After loop, left and right converge to the closest point.
    if (left === 0) return arr[0];
    if (Math.abs(arr[left] - target) < Math.abs(arr[left - 1] - target)) return arr[left];
    return arr[left - 1];
}


function kthSmallest(matrix, k) {
    let left = matrix[0][0], right = matrix[matrix.length - 1][matrix[0].length - 1];
    while (left < right) {
        const mid = Math.floor((left + right) / 2);
        let count = 0;
        for (const row of matrix) {
            count += row.filter(value => value <= mid).length;
        }
        if (count < k) left = mid + 1;
        else right = mid;
    }
    return left;
}


function findMedianSortedArrays(nums1, nums2) {
    if (nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);

    const x = nums1.length, y = nums2.length;
    let left = 0, right = x;
    while (left <= right) {
        const partitionX = Math.floor((left + right) / 2);
        const partitionY = Math.floor((x + y + 1) / 2) - partitionX;

        const maxX = partitionX === 0 ? -Infinity : nums1[partitionX - 1];
        const minX = partitionX === x ? Infinity : nums1[partitionX];
        const maxY = partitionY === 0 ? -Infinity : nums2[partitionY - 1];
        const minY = partitionY === y ? Infinity : nums2[partitionY];

        if (maxX <= minY && maxY <= minX) {
            if ((x + y) % 2 === 0) {
                return (Math.max(maxX, maxY) + Math.min(minX, minY)) / 2;
            } else {
                return Math.max(maxX, maxY);
            }
        } else if (maxX > minY) right = partitionX - 1;
        else left = partitionX + 1;
    }
    throw new Error("Input arrays are not sorted.");
}

