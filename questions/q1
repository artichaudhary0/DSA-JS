1. Median in a Stream of Integers
You are given a stream of integers, and you need to find the median of the elements at any given point in time.
Constraints: The stream can contain up to 10^6 elements.
Hints: Use a combination of min-heap and max-heap.
2. Trapping Rainwater Problem 
Given n non-negative integers representing the heights of blocks, compute how much water can be trapped after raining.
Example Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Hints: Use two-pointer technique or precompute maximum heights.
3. Maximum Subarray XOR
Given an array of integers, find the subset of elements that gives the maximum XOR.
Constraints: Array size can be 10^5.
Hints: Use a trie for efficient XOR computation.
4. Minimum Window Substring
Given two strings s and t, find the minimum window in s which contains all the characters of t.
Example Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Hints: Use sliding window and hash maps.
5. Word Break Problem
Given a string and a dictionary of words, determine if the string can be segmented into space-separated words from the dictionary.
Example Input: s = "leetcode", dict = ["leet", "code"]
Output: true
Hints: Use dynamic programming.
6. Shortest Path in Weighted Graph with Negative Weights
Find the shortest path from a source vertex to all other vertices in a weighted graph that may contain negative weights.
Constraints: Use 
𝑉
≤
5000
V≤5000, 
𝐸
≤
1
0
6
E≤10 
6
 .
Hints: Use Bellman-Ford algorithm.
7. Kth Smallest Element in a Row-Column Sorted Matrix
Given a 
𝑛
×
𝑛
n×n matrix where each row and column is sorted, find the 
𝑘
k-th smallest element.
Constraints: 
𝑛
≤
1
0
3
n≤10 
3
 , 
𝑘
≤
𝑛
2
k≤n 
2
 .
Hints: Use a min-heap or binary search on value range.
8. Count Inversions in an Array
Count the number of inversions in an array, where an inversion is when 
𝑎
[
𝑖
]
>
𝑎
[
𝑗
]
a[i]>a[j] and 
𝑖
<
𝑗
i<j.
Constraints: 
1
≤
𝑛
≤
1
0
5
1≤n≤10 
5
 .
Hints: Use a modified merge sort.
9. Edit Distance Problem
Find the minimum number of operations (insert, delete, substitute) to convert string a into string b.
Example Input: a = "horse", b = "ros"
Output: 3 (horse → rorse → rose → ros)
Hints: Use dynamic programming.
10. Segment Tree with Lazy Propagation
Implement a segment tree that supports range updates (e.g., increment all elements in a range) and range queries (e.g., find the sum of a range).
Constraints: Array size 
1
≤
𝑛
≤
1
0
6
1≤n≤10 
6
 .
Hints: Use lazy propagation to avoid recalculating unchanged segments.


1. Array - Two Sum Problem
Problem: Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target.
Difficulty: Easy
Example:
Input: nums = [2, 7, 11, 15], target = 9
Output: [0, 1]

2. String - Longest Palindromic Substring
Problem: Find the longest palindromic substring in a given string s.
Difficulty: Medium
Example:
Input: s = "babad"
Output: "bab" or "aba"

3. Binary Search - Search in Rotated Sorted Array
Problem: Search for a target value in a rotated sorted array. If it exists, return its index; otherwise, return -1.
Difficulty: Medium
Example:
Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 0
Output: 4

4. Graph - Detect Cycle in a Directed Graph
Problem: Given a directed graph, determine whether it contains a cycle.
Difficulty: Medium
Example: Use BFS (Kahn's Algorithm) or DFS to solve.

5. Dynamic Programming - Knapsack Problem
Problem: Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Difficulty: Medium
Example:
Input: weights = [1, 3, 4, 5], values = [1, 4, 5, 7], W = 7
Output: 9

6. Linked List - Reverse a Linked List
Problem: Reverse a singly linked list.
Difficulty: Easy
Example:
Input: head = [1, 2, 3, 4, 5]
Output: [5, 4, 3, 2, 1]

7. Tree - Lowest Common Ancestor
Problem: Given a binary tree, find the lowest common ancestor of two given nodes in the tree.
Difficulty: Medium
Example:
Input: Tree with nodes 5, 3, 6, 2, 4, 0, 8, p = 3, q = 6
Output: 5

8. Sorting - Merge Intervals
Problem: Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals.
Difficulty: Medium
Example:
Input: [[1, 3], [2, 6], [8, 10], [15, 18]]
Output: [[1, 6], [8, 10], [15, 18]]

9. Stack - Valid Parentheses
Problem: Given a string s containing only '(', ')', '{', '}', '[', ']', determine if the input string is valid.
Difficulty: Easy
Example:
Input: "([{}])"
Output: true

10. Greedy - Minimum Spanning Tree (MST)
Problem: Given a graph with V vertices and E edges, find the MST using Kruskal's or Prim's algorithm.
Difficulty: Hard
Example: Use adjacency list or matrix representation.


11. Matrix - Search a 2D Matrix
Problem: Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending order.
The first integer of each row is greater than the last integer of the previous row.
Difficulty: Medium
Example:
Input: matrix = [[1, 3, 5], [7, 10, 11]], target = 10
Output: true
12. Binary Tree - Level Order Traversal
Problem: Given the root of a binary tree, return its level order traversal (nodes from left to right, level by level).
Difficulty: Medium
Example:
Input: root = [3, 9, 20, null, null, 15, 7]
Output: [[3], [9, 20], [15, 7]]

13. Trie - Implement Prefix Tree
Problem: Implement a Trie (Prefix Tree) with insert, search, and startsWith methods.
Difficulty: Medium
Example:
Input: trie.insert("apple"); trie.search("app"); trie.startsWith("app");
Output: false, true

14. Sliding Window - Longest Substring Without Repeating Characters
Problem: Find the length of the longest substring without repeating characters.
Difficulty: Medium
Example:
Input: s = "abcabcbb"
Output: 3 (Substring is "abc")

15. Graph - Dijkstra's Algorithm
Problem: Given a graph and a source vertex, find the shortest path from the source to all vertices using Dijkstra’s algorithm.
Difficulty: Medium
Example:
Input: Graph with weights and source vertex.
Output: Distance array with the shortest path to each vertex.

16. Heap - Kth Largest Element in an Array
Problem: Find the k-th largest element in an unsorted array.
Difficulty: Medium
Example:
Input: nums = [3, 2, 1, 5, 6, 4], k = 2
Output: 5

17. Dynamic Programming - Longest Common Subsequence
Problem: Given two strings text1 and text2, return the length of their longest common subsequence.
Difficulty: Medium
Example:
Input: text1 = "abcde", text2 = "ace"
Output: 3 (LCS: "ace")

18. Backtracking - N-Queens Problem
Problem: Place n queens on an n*n chessboard such that no two queens attack each other.
Difficulty: Hard
Example:
Input: n = 4
Output: List of all valid solutions.

19. Stack - Largest Rectangle in Histogram
Problem: Given an array of integers representing the heights of a histogram's bars, find the area of the largest rectangle in the histogram.
Difficulty: Hard
Example:
Input: heights = [2, 1, 5, 6, 2, 3]
Output: 10

20. Graph - Topological Sort
Problem: Given a directed acyclic graph (DAG), return its topological order.
Difficulty: Medium
Example:
Input: Adjacency list of a graph.
Output: A valid topological order.

